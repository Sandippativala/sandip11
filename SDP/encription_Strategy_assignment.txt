//interface

public interface StrategyClass{
	public void encode(String input);
}

//sha1

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class SHA1 implements StrategyClass{
	public void encode(String input){
		try {
			// Create MessageDigest instance for SHA-256
			MessageDigest md = MessageDigest.getInstance("SHA1");

			// Add input string bytes to digest
			md.update(input.getBytes());

			// Get the hash's bytes
			byte[] hashBytes = md.digest();

			// Convert hash bytes to a hexadecimal string
			StringBuilder hexString = new StringBuilder();
			for (int i = 0; i < hashBytes.length; i++) {
				String hex = Integer.toHexString(0xff & hashBytes[i]);
				if (hex.length() == 1) {
					hexString.append('0');
				}
				hexString.append(hex);
			}

			System.out.println("SHA-256 Hash: " + hexString.toString());
		} catch (NoSuchAlgorithmException e) {
			System.err.println("Error: SHA-256 algorithm not found.");
			e.printStackTrace();
		}
	}
}

//sha

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class SHA implements StrategyClass{
	public void encode(String input){
		try {
			// Create MessageDigest instance for SHA-256
			MessageDigest md = MessageDigest.getInstance("SHA-256");

			// Add input string bytes to digest
			md.update(input.getBytes());

			// Get the hash's bytes
			byte[] hashBytes = md.digest();

			// Convert hash bytes to a hexadecimal string
			StringBuilder hexString = new StringBuilder();
			for (int i = 0; i < hashBytes.length; i++) {
				String hex = Integer.toHexString(0xff & hashBytes[i]);
				if (hex.length() == 1) {
					hexString.append('0');
				}
				hexString.append(hex);
			}

			System.out.println("SHA-256 Hash: " + hexString.toString());
		} catch (NoSuchAlgorithmException e) {
			System.err.println("Error: SHA-256 algorithm not found.");
			e.printStackTrace();
		}
	}
}

//md5

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class MD5 implements StrategyClass{
	public void encode(String input){
		try {
            // Create MessageDigest instance for MD5
            MessageDigest md = MessageDigest.getInstance("MD5");

            // Add input string bytes to digest
            md.update(input.getBytes());

            // Get the hash's bytes
            byte[] hashBytes = md.digest();

            // Convert hash bytes to a hexadecimal string
            StringBuilder hexString = new StringBuilder();
            for (int i = 0; i < hashBytes.length; i++) {
                String hex = Integer.toHexString(0xff & hashBytes[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }

            System.out.println("MD5 Hash: " + hexString.toString());
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error: MD5 algorithm not found.");
            e.printStackTrace();
        }
	}
}

//contextclass
public class ContextClass{
	StrategyClass strategyClass;
	public ContextClass(StrategyClass strategyClass){
		this.strategyClass = strategyClass;
	}
	
	public void setStrategy(StrategyClass strategyClass){
		this.strategyClass = strategyClass;
	}
	
	public void encode(String input) {
        strategyClass.encode(input);
    }
}

//main

import java.util.Scanner;

class Main{
	public static void main(String args[]){
		Scanner sc = new Scanner(System.in);
		// System.out.print("Enter String:");
		// s = sc.next();
		String s = "GujaratVidyapith";
		int c=0;
		ContextClass cs = new ContextClass(new SHA());
		do{
			System.out.print("\n1.SHA256\n2.MD5\n3.SHA-1\n4.Exit\nEnter your choice:");
			c = sc.nextInt();
			switch(c){
				case 1:
				cs.encode(s);
				break;
				
				case 2:
				cs.setStrategy(new MD5());
				cs.encode(s);
				break;
				
				case 3:
				cs.setStrategy(new SHA1());
				cs.encode(s);
				break;
				
				case 4:
				System.exit(0);
				
				default:
				System.out.println("\nEnter valid choice");
			}
		}while(c!=4);
	}
}