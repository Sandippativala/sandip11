//interface
public interface IFolder
{
	public boolean createFolder(String fname);
	public boolean renameFolder(String oldname,String newname);
	public boolean copyFolder(String sourcepath,String destinationpath);
	public boolean deleteFolder(String fname);
}

//folderProxy

public class FolderProxy implements IFolder
{
	private final Folder folder;
	private final User user;
	private final String role;
	
	public FolderProxy(User user) {
        this.user = user;
		this.folder=new Folder();
        this.role = UserAuthentication.authenticate(user.getUserName(), user.getPassword());
    }

	
	public boolean isAdmin() {
        return "admin".equals(role);
    }

    public boolean isUser() {
        return "user".equals(role);
    }
	
	public boolean createFolder(String folderName) {
        if (role != null && (isAdmin() || isUser())) {
            return folder.createFolder(folderName);
        }
        return false;
    }
	public boolean copyFolder(String sourceFolder, String destinationFolder) {
        if (role != null && (isAdmin() || isUser())) {
            return folder.copyFolder(sourceFolder, destinationFolder);
        }
        return false;
    }
	public boolean renameFolder(String oldName, String newName) {
        if (isAdmin()) {
            return folder.renameFolder(oldName, newName);
        }
        return false;
    }
	public boolean deleteFolder(String folderName) {
        if (isAdmin()) {
            return folder.deleteFolder(folderName);
        }
        return false;
    }




}

// folder

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
public class Folder implements IFolder
{
	private boolean isExists(String foldername)
	{
		File folder=new File(foldername);
		return folder.exists();	
		
	}
	
	public boolean createFolder(String fname)
	{
		File newFolder=new File(fname);
		if(!isExists(fname))
		{
			if(newFolder.mkdir())
			{
					return true;
				
			}
			else
			{
				return false;
				
			}
			
			
		}
		else
		{
			
			return false;
			
		}
		
		
		
	}
	public boolean renameFolder(String oldname,String newname)
	{
		File oldFolder=new File(oldname);
		File newFolder=new File(newname);
		if(isExists(oldname))
		{
			if(oldFolder.renameTo(newFolder))
			{
				return true;
			}
			else
			{
				return false;
				
			}
			
		}
		else
		{
			return false;
			
		}
		
		
		
	}
	public boolean copyFolder(String sourceFolder, String destinationFolder)
	{
		File source = new File(sourceFolder);
        File destination = new File(destinationFolder);

        if (!isExists(sourceFolder)) {
            return false;
        }

        if (!destination.exists()) {
            destination.mkdir();
        }
		try 
		{
            Files.walk(source.toPath())
                    .forEach(sourcePath -> {
                        try {
                            Path destinationPath = destination.toPath().resolve(source.toPath().relativize(sourcePath));
                            Files.copy(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);
                        } catch (IOException e) {
                            // Do nothing, just ignore the exception
                        }
                    });
            return true;
        }
		catch (IOException e) 
		{
            return false;
        }
		
		
		
	}
	
	
	
	public boolean deleteFolder(String folderName) {
        File folderToDelete = new File(folderName);
        if (isExists(folderName)) {
            if (folderToDelete.isDirectory()) {
                return deleteRecursive(folderToDelete);
            }
        } else {
            return false;
        }
        return false;
    }
	
	private boolean deleteRecursive(File file) {
        File[] contents = file.listFiles();
        if (contents != null) {
            for (File f : contents) {
                if (!deleteRecursive(f)) {
                    return false;
                }
            }
        }
        return file.delete();
    }
	



}

//userAuthentication

import java.io.BufferedReader;
import java.io.IOException;
import java.io.FileReader;

public class UserAuthentication
{
	private static final String USER_DATA_FILE="userdata.txt";
	public static String authenticate(String username ,String password)
	{
	
	try(BufferedReader reader=new BufferedReader(new FileReader(USER_DATA_FILE)))
	{
		String line;
		while((line=reader.readLine()) !=null)
		{
			String[] userData = line.split(",");
                if (userData.length == 3)
					{
						String user = userData[0].trim();
						String pass = userData[1].trim();
						String role = userData[2].trim();
						
						if (user.equals(username) && pass.equals(password))
							{
								return role; 
							}
					}

		}
		
	}
	catch(IOException e)
	{
		
		e.printStackTrace();
		
	}
	return null;
	
	
}
}

//user

public class User
{
	private String username;
	private String password;
	
	public User(String username,String password)
	{
		
		this.username=username;
		this.password=password;
		
	}
	public String getUserName()
	{
		return username;
		
		
	}
	public String getPassword()
	{
		return password;
		
	}



}

//main

import java.util.*;
public class Main
{
	public static void main(String [] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.print("Enter your username:");
		String username=sc.next();
		System.out.print("Enter your password:");
		String password=sc.next();
		
		User user=new User(username,password);
		FolderProxy folderproxy=new FolderProxy(user);
		String role=UserAuthentication.authenticate(username,password);
		
			
			if(role==null)
			{
				System.out.println("Authentication Failed. Access denied...");
				return;
			}
			System.out.println("\nWelcome, " + username + "!");
		
			while (true)
				{
            System.out.println("\nEnter the operation you want to perform on folder:");
            System.out.println("1. Create folder");
            System.out.println("2. Copy folder");
            System.out.println("3. Rename folder");
            System.out.println("4. Delete folder");
            System.out.println("5. Exit");

            System.out.print("\nEnter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    if (folderproxy.isAdmin() || folderproxy.isUser()) {
                        System.out.print("\nEnter folder name to create: ");
                        String createFolderName = sc.next();
                        folderproxy.createFolder(createFolderName);
                    } else {
                        System.out.println("You don't have permission to create folders");
                    }
                    break;
                case 2:
                    if (folderproxy.isAdmin() || folderproxy.isUser()) {
                        System.out.print("\nEnter source folder: ");
                        String sourceFolder = sc.next();
                        System.out.print("Enter destination folder: ");
                        String destinationFolder = sc.next();
                        folderproxy.copyFolder(sourceFolder, destinationFolder);
                    } else {
                        System.out.println("You don't have permission to copy folders");
                    }
                    break;
                case 3:
                    if (folderproxy.isAdmin()) {
                        System.out.print("\nEnter old folder name: ");
                        String oldFolderName = sc.next();
                        System.out.print("Enter new folder name: ");
                        String newFolderName = sc.next();
                        folderproxy.renameFolder(oldFolderName, newFolderName);
                    } else {
                        System.out.println("You don't have permission to rename folders");
                    }
                    break;
                case 4:
                    if (folderproxy.isAdmin()) {
                        System.out.print("\nEnter folder name to delete: ");
                        String deleteFolderName = sc.next();
                        folderproxy.deleteFolder(deleteFolderName);
                    } else {
                        System.out.println("You don't have permission to delete folders");
                    }
                    break;
                case 5:
                    System.exit(0);
                default:
                    System.out.println("\nInvalid choice");
            }
        }
		
		
		
	}




}





